package com.teste.neliogodoi.fullstack.testes;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.teste.neliogodoi.fullstack.controller.DebtController;
import com.teste.neliogodoi.fullstack.repository.DebtRepository;

@RunWith(SpringRunner.class)
@WebMvcTest(DebtController.class)
public class TestingDebtController {
	
	private String token;
	
	@Autowired
	private MockMvc mvc;
	
	@MockBean
	public DebtRepository  repository;

	@Test
	public void shouldReturnDefaultMessage() throws Exception {
		
		RequestBuilder request = MockMvcRequestBuilders.get("/divida").header("Authorization", this.getToken());
		this.mvc.perform(request)
				.andDo(print())
				.andExpect(status().isNotFound());
	}
	
	@Test
	private String getToken() {
		if(this.token != null) {
			return this.token;
		} else {
			String body = "{\"username\":\"admin\", \"password\":\"passwd\"}";
			MvcResult result;
			try {
				result = this.mvc.perform(MockMvcRequestBuilders.post("/login")
						.content(body))
						.andExpect(status().isOk())
						.andReturn();
				String response = result.getResponse().getContentAsString();
				this.token = response;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return this.token;
		}
	}
}
